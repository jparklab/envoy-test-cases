#!/usr/bin/python3
import argparse
import logging
import os
import subprocess
import sys
import time

LOG = logging.getLogger("envoy-test")

def run():
    logging.basicConfig(level=logging.INFO)

    parser = argparse.ArgumentParser()
    parser.add_argument("-o", "--output-dir", help="output directory where logs will be stored", required=True)
    parser.add_argument("--large-file", help="path to a large file used for testing")
    parser.add_argument("--envoy-bin", help="path to envoy binary", default="envoy-v1.26.6")

    args = parser.parse_args()

    test_dir = os.path.abspath(os.path.dirname(sys.argv[0]))
    output_dir = os.path.abspath(args.output_dir)

    envoy_bin = args.envoy_bin
    if not os.path.exists(envoy_bin):
        sys.exit(f"Unable to find {envoy_bin}, please set path to envoy binary using --envoy-bin option")

    envoy_config = os.path.join(test_dir, "envoy.yaml")

    processes = []
    try:
        # run reservation server
        reserve_server_proc = subprocess.Popen(
            [
                os.path.join(test_dir, "reservation_server"),
            ],
            stdout=open(os.path.join(output_dir, "reservation.stdout"), "w"),
            stderr=open(os.path.join(output_dir, "reservation.stderr"), "w")
        )
        processes.append(reserve_server_proc)

        envoy_proc = subprocess.Popen(
            [   envoy_bin, 
                "-c", envoy_config,
                "--base-id", "1"
            ],
            stdout=open(os.path.join(output_dir, "envoy.stdout"), "w"),
            stderr=open(os.path.join(output_dir, "envoy.stderr"), "w")
        )
        processes.append(envoy_proc)

        time.sleep(3)
        for p in processes:
            if p.poll() is not None:
                raise Exception(f"Failed to start process {p.args}: {p.returncode}")

        large_file_path = args.large_file
        if large_file_path is None:
            # create a large file for testing
            LOG.info("Create a test file")
            large_file_path = os.path.join(output_dir, "bigfile")
            subprocess.check_call(
                [
                    "dd",
                    "if=/dev/zero",
                    f"of={large_file_path}",
                    "bs=1M", "count=10"
                ]
            )

        LOG.info("Uploading a big file")

        print("-" * 60)
        print("curl output:")
        print("")
        subprocess.call(
            f"curl -T {large_file_path} http://127.0.0.1:6080/upload/bigfile",
            stdout=sys.stdout, stderr=sys.stdout, shell=True,
        )
        print("")
        print("-" * 60)

    finally:
        for p in processes:
            LOG.info(f"Terminating {p.args}")
            p.terminate()
            time.sleep(0.1)
            p.kill()

if __name__ == "__main__":
    run()